name: Generate Documentation and Publish to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build project
      run: dotnet build --no-restore
    
    - name: Run tests
      run: dotnet test --no-build --verbosity normal
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install DocFx
      run: npm install -g docfx
    
    - name: Generate API Documentation
      run: |
        mkdir -p docs
        docfx metadata --force
    
    - name: Create PlantUML for Class Diagrams
      run: |
        cat > docs/class-diagram.puml << 'EOF'
@startuml OrderProcessingSystem
!theme plain

class InventoryService {
  +CheckStock(productId: string): bool
}

class PaymentService {
  +ProcessPayment(customerId: string, amount: decimal): bool
}

class ShippingService {
  +ShipProduct(productId: string, address: string): void
}

class OrderFacade {
  -_inventoryService: InventoryService
  -_paymentService: PaymentService
  -_shippingService: ShippingService
  +OrderFacade()
  +ProcessOrder(productId: string, customerId: string, amount: decimal, address: string): void
}

class OrderProcessor {
  -_orderFacade: OrderFacade
  +OrderProcessor()
  +ProcessOrder(productId: string, customerId: string, amount: decimal, address: string): void
}

class OrderProcessorTests {
  +ProcessOrder_ExecutesAllSteps(): void
}

OrderFacade --> InventoryService
OrderFacade --> PaymentService  
OrderFacade --> ShippingService
OrderProcessor --> OrderFacade
OrderProcessorTests --> OrderProcessor

note right of OrderProcessor::ProcessOrder
  Delega la l√≥gica compleja al OrderFacade,
  manteniendo una interfaz simple
end note

note right of OrderFacade::ProcessOrder
  Encapsula la coordinaci√≥n entre
  InventoryService, PaymentService
  y ShippingService
end note

@enduml
EOF
    
    - name: Install PlantUML
      run: |
        wget -O plantuml.jar https://github.com/plantuml/plantuml/releases/download/v1.2023.12/plantuml-1.2023.12.jar
        chmod +x plantuml.jar
    
    - name: Generate Class Diagram PNG
      run: |
        java -jar plantuml.jar -tpng docs/class-diagram.puml -o docs/
    
    - name: Create Documentation Index
      run: |
        cat > docs/index.html << 'EOF'
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Processing System - Documentaci√≥n</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
            background-color: #f8f9fa;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }
        h2 {
            color: #34495e;
            margin-top: 30px;
        }
        .highlight {
            background-color: #e8f4fd;
            padding: 15px;
            border-left: 4px solid #3498db;
            margin: 15px 0;
        }
        .benefit {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
        }
        .code-block {
            background-color: #f4f4f4;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            font-family: 'Courier New', monospace;
            margin: 15px 0;
        }
        .nav-links {
            background: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }
        .nav-links a {
            color: #2980b9;
            text-decoration: none;
            margin-right: 20px;
            font-weight: bold;
        }
        .nav-links a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Sistema de Procesamiento de Pedidos - Patr√≥n FACADE</h1>
        
        <div class="nav-links">
            <a href="api/index.html">üìö Documentaci√≥n API</a>
            <a href="class-diagram.png">üìä Diagrama de Clases</a>
            <a href="https://github.com">üíª C√≥digo Fuente</a>
        </div>

        <h2>üìã Descripci√≥n del Proyecto</h2>
        <p>Esta aplicaci√≥n demuestra la implementaci√≥n del patr√≥n de dise√±o <strong>FACADE</strong> para refactorizar un sistema de procesamiento de pedidos, simplificando la interacci√≥n con m√∫ltiples servicios complejos.</p>

        <div class="highlight">
            <strong>üéØ Objetivo:</strong> Proporcionar una interfaz simplificada para acceder a la funcionalidad de m√∫ltiples servicios (Inventario, Pagos, Env√≠o) a trav√©s de una clase FACADE bien estructurada.
        </div>

        <h2>üèóÔ∏è Arquitectura del Sistema</h2>
        
        <h3>Servicios Independientes</h3>
        <ul>
            <li><strong>InventoryService</strong>: Maneja la verificaci√≥n de stock de productos</li>
            <li><strong>PaymentService</strong>: Procesa los pagos de clientes</li>
            <li><strong>ShippingService</strong>: Gestiona el env√≠o de productos</li>
        </ul>

        <h3>Patr√≥n FACADE</h3>
        <ul>
            <li><strong>OrderFacade</strong>: Encapsula la l√≥gica compleja y coordina servicios</li>
            <li><strong>OrderProcessor</strong>: Interfaz simplificada que usa el FACADE</li>
        </ul>

        <h2>‚ú® Beneficios del Patr√≥n FACADE</h2>
        
        <div class="benefit">
            <strong>üîß Simplicidad de Interfaz:</strong> OrderProcessor tiene implementaci√≥n m√°s limpia y simple
        </div>
        
        <div class="benefit">
            <strong>üîó Desacoplamiento:</strong> Los servicios est√°n completamente separados de la l√≥gica de negocio
        </div>
        
        <div class="benefit">
            <strong>üõ†Ô∏è Mantenibilidad:</strong> La coordinaci√≥n est√° centralizada en OrderFacade
        </div>
        
        <div class="benefit">
            <strong>üß™ Testabilidad:</strong> Las pruebas funcionan sin cambios porque la interfaz p√∫blica no cambi√≥
        </div>

        <h2>üíª Implementaci√≥n</h2>

        <h3>Antes (Implementaci√≥n Original)</h3>
        <div class="code-block">
public void ProcessOrder(string productId, string customerId, decimal amount, string address)
{
    var inventory = new InventoryService();
    var payment = new PaymentService();
    var shipping = new ShippingService();

    if (inventory.CheckStock(productId) && payment.ProcessPayment(customerId, amount))
    {
        shipping.ShipProduct(productId, address);
    }
}
        </div>

        <h3>Despu√©s (Con Patr√≥n FACADE)</h3>
        <div class="code-block">
// En OrderFacade.cs
public void ProcessOrder(string productId, string customerId, decimal amount, string address)
{
    if (_inventoryService.CheckStock(productId) && _paymentService.ProcessPayment(customerId, amount))
    {
        _shippingService.ShipProduct(productId, address);
    }
}

// En OrderProcessor.cs
public void ProcessOrder(string productId, string customerId, decimal amount, string address)
{
    _orderFacade.ProcessOrder(productId, customerId, amount, address);
}
        </div>

        <h2>üß™ Pruebas y Validaci√≥n</h2>
        <p>Todas las pruebas unitarias pasan exitosamente, confirmando que la refactorizaci√≥n mantiene la funcionalidad original mientras mejora la arquitectura del sistema.</p>

        <div class="highlight">
            <strong>‚úÖ Estado de Pruebas:</strong> 1 test passed, 0 failed
        </div>

        <h2>üîÑ Flujo de Automatizaci√≥n</h2>
        <p>Esta documentaci√≥n se genera autom√°ticamente usando GitHub Actions que:</p>
        <ol>
            <li>Construye y prueba el proyecto</li>
            <li>Genera documentaci√≥n API con DocFx</li>
            <li>Crea diagramas de clases con PlantUML</li>
            <li>Publica todo en GitHub Pages</li>
        </ol>

        <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #bdc3c7; text-align: center; color: #7f8c8d;">
            <p>Generado autom√°ticamente por GitHub Actions ‚Ä¢ √öltima actualizaci√≥n: $(date)</p>
        </div>
    </div>
</body>
</html>
EOF
    
    - name: Upload Documentation
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/

  deploy:
    needs: generate-documentation
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4