name: Generate Documentation and Publish to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build project
      run: dotnet build --no-restore
    
    - name: Run tests
      run: dotnet test --no-build --verbosity normal
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install DocFx
      run: npm install -g docfx
    
    - name: Generate API Documentation
      run: |
        mkdir -p docs
        docfx metadata --force
    
    - name: Create PlantUML for Class Diagrams
      run: |
        cat > docs/class-diagram.puml << 'EOF'
@startuml OrderProcessingSystem
!theme plain

class InventoryService {
  +CheckStock(productId: string): bool
}

class PaymentService {
  +ProcessPayment(customerId: string, amount: decimal): bool
}

class ShippingService {
  +ShipProduct(productId: string, address: string): void
}

class OrderFacade {
  -_inventoryService: InventoryService
  -_paymentService: PaymentService
  -_shippingService: ShippingService
  +OrderFacade()
  +ProcessOrder(productId: string, customerId: string, amount: decimal, address: string): void
}

class OrderProcessor {
  -_orderFacade: OrderFacade
  +OrderProcessor()
  +ProcessOrder(productId: string, customerId: string, amount: decimal, address: string): void
}

class OrderProcessorTests {
  +ProcessOrder_ExecutesAllSteps(): void
}

OrderFacade --> InventoryService
OrderFacade --> PaymentService  
OrderFacade --> ShippingService
OrderProcessor --> OrderFacade
OrderProcessorTests --> OrderProcessor

note right of OrderProcessor::ProcessOrder
  Delega la lógica compleja al OrderFacade,
  manteniendo una interfaz simple
end note

note right of OrderFacade::ProcessOrder
  Encapsula la coordinación entre
  InventoryService, PaymentService
  y ShippingService
end note

@enduml
EOF
    
    - name: Install PlantUML
      run: |
        wget -O plantuml.jar https://github.com/plantuml/plantuml/releases/download/v1.2023.12/plantuml-1.2023.12.jar
        chmod +x plantuml.jar
    
    - name: Generate Class Diagram PNG
      run: |
        java -jar plantuml.jar -tpng docs/class-diagram.puml -o docs/
    
    - name: Create Documentation Index
      run: |
        echo "Order Processing System - Documentation" > docs/README.md
        echo "========================================" >> docs/README.md
        echo "" >> docs/README.md
        echo "Generated on: $(date)" >> docs/README.md
        echo "Build: ${{ github.run_number }}" >> docs/README.md
        echo "Commit: ${{ github.sha }}" >> docs/README.md
        echo "" >> docs/README.md
        echo "This project demonstrates the FACADE design pattern." >> docs/README.md
        echo "See API documentation in docs/api/ and class diagram in docs/class-diagram.png" >> docs/README.md
    
    - name: Upload Documentation
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/

  deploy:
    needs: generate-documentation
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4