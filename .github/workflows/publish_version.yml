name: Create Version Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to release (e.g., v1.0.1)'
        required: true
        type: string

env:
  DOTNET_VERSION: '6.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  test-and-analyze:
    name: Test and Analyze Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="${{ inputs.version_tag }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Run tests with coverage
      run: |
        dotnet test \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage

    - name: List test results
      run: |
        echo "Test results directory structure:"
        find coverage/ -type f -name "*.xml" -o -name "*.trx" | head -10
        echo "Coverage files:"
        find coverage/ -name "*.xml" | head -5

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/**/coverage.cobertura.xml
        flags: release
        name: codecov-release
        fail_ci_if_error: false

    - name: Generate coverage report
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.1.19
        mkdir -p coverage-reports
        reportgenerator \
        -reports:./coverage/**/coverage.cobertura.xml \
        -targetdir:coverage-reports \
        -reporttypes:"Html;HtmlSummary;Xml;XmlSummary"

    - name: Create coverage summary
      run: |
        echo "# Coverage Report - Build ${{ github.run_number }}" > coverage-reports/index.md
        echo "**Commit:** ${{ github.sha }}" >> coverage-reports/index.md
        echo "**Date:** $(date)" >> coverage-reports/index.md
        echo "**Version:** ${{ steps.version.outputs.VERSION }}" >> coverage-reports/index.md
        echo "" >> coverage-reports/index.md
        echo "See detailed reports:" >> coverage-reports/index.md
        echo "- [HTML Report](HtmlReport.html)" >> coverage-reports/index.md
        echo "- [Summary Report](SummaryHtmlReport.html)" >> coverage-reports/index.md
        echo "- [XML Report](coverage.xml)" >> coverage-reports/index.md

    - name: Archive coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: coverage-reports/
        retention-days: 90

  publish-coverage-pages:
    name: Publish Coverage to GitHub Pages
    runs-on: ubuntu-latest
    needs: test-and-analyze
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: coverage/

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Upload coverage to Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: coverage/

  create-package:
    name: Create NuGet Package
    runs-on: ubuntu-latest
    needs: test-and-analyze
    outputs:
      package-version: ${{ steps.package-info.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="${{ inputs.version_tag }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Create OrderProcessing package
      run: |
        dotnet pack \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --no-build \
          --output ./nuget-packages \
          -p:PackageVersion=${{ steps.version.outputs.VERSION }} \
          -p:RepositoryUrl=${{ github.server_url }}/${{ github.repository }}.git \
          -p:RepositoryType=git \
          -p:PublishRepositoryUrl=true \
          -p:IncludeSymbols=true \
          -p:SymbolPackageFormat=snupkg

    - name: Get package information
      id: package-info
      run: |
        PACKAGE=$(ls nuget-packages/OrderProcessing.*.nupkg | head -1)
        VERSION=$(echo $PACKAGE | sed -n 's/.*\.\([0-9]\+\.[0-9]\+\.[0-9]\+\(-.*\)\?\)\.nupkg/\1/p')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "OrderProcessing version: $VERSION"

    - name: Upload package as artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages-${{ steps.version.outputs.VERSION }}
        path: nuget-packages/*.nupkg
        retention-days: 90

  publish-to-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: create-package
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Download package
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages-${{ needs.create-package.outputs.package-version }}
        path: ./nuget-packages

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Publish OrderProcessing to GitHub Packages
      run: |
        dotnet nuget push "./nuget-packages/OrderProcessing.*.nupkg" \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
          --skip-duplicate

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test-and-analyze, create-package]
    if: always() && (needs.test-and-analyze.result == 'success')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="${{ inputs.version_tag }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Download package
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages-${{ steps.version.outputs.VERSION }}
        path: ./nuget-packages

    - name: Generate release notes
      id: release-notes
      run: |
        # Get recent commits since last tag
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            COMMITS=$(git log --oneline ${LAST_TAG}..HEAD --grep="feat\|fix\|doc\|refactor\|test" | head -20)
          else
            COMMITS=$(git log --oneline -20)
          fi
        else
          COMMITS="Manual release: ${{ steps.version.outputs.VERSION }}"
        fi

        # Create release notes
        NOTES="# Release ${{ steps.version.outputs.VERSION }}\n\n"
        NOTES+="## Order Processing System\n\n"
        NOTES+="This release contains the implementation of the **FACADE** design pattern for order processing.\n\n"
        NOTES+="## Changes\n\n"
        if [[ -n "$COMMITS" ]]; then
          NOTES+="$COMMITS\n\n"
        fi
        NOTES+="## Package\n\n"
        NOTES+="- **OrderProcessing** v${{ needs.create-package.outputs.package-version }}\n\n"
        NOTES+="## Installation\n\n"
        NOTES+="\`\`\`bash\n"
        NOTES+="dotnet nuget add source --name github \"https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json\"\n\n"
        NOTES+="dotnet add package OrderProcessing --version ${{ needs.create-package.outputs.package-version }}\n"
        NOTES+="\`\`\`\n\n"
        NOTES+="## Files\n\n"
        for file in ./nuget-packages/*.nupkg; do
          if [[ -f "$file" ]]; then
            filename=$(basename "$file")
            NOTES+="- \`$filename\`\n"
          fi
        done

        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: "Release ${{ steps.version.outputs.VERSION }}"
        body: ${{ steps.release-notes.outputs.RELEASE_NOTES }}
        files: |
          ./nuget-packages/*.nupkg
        generate_release_notes: false
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, 'alpha') || contains(steps.version.outputs.VERSION, 'beta') || contains(steps.version.outputs.VERSION, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create deployment for packages
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        echo "Package deployed to GitHub Packages:"
        echo "- OrderProcessing v${{ needs.create-package.outputs.package-version }}"
        echo ""
        echo "Available at: https://nuget.pkg.github.com/${{ github.repository_owner }}/"

  deploy-coverage:
    name: Deploy Coverage Reports
    runs-on: ubuntu-latest
    needs: publish-coverage-pages
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Deploy coverage reports to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4