name: Build, Test Coverage and Release

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "build-test-release"
  cancel-in-progress: false

env:
  DOTNET_VERSION: '6.0.x'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build project
      run: dotnet build --configuration Release --no-restore
    
    - name: Install Coverlet MSBuild
      run: dotnet tool install --global coverlet.console
    
    - name: Run tests with coverage
      run: |
        dotnet test --configuration Release --no-build --verbosity normal \
        /p:CollectCoverage=true \
        /p:CoverletOutputFormat=cobertura \
        /p:CoverletOutput=./coverage/ \
        /p:ExcludeByAttribute=Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute \
        /p:ExcludeByFile="**/Migrations/*.cs"
    
    - name: Install ReportGenerator
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.1.19
    
    - name: Generate coverage report
      run: |
        mkdir -p coverage
        reportgenerator \
        -reports:**/coverage.cobertura.xml \
        -targetdir:coverage \
        -reporttypes:"Html;HtmlSummary;Xml;XmlSummary"
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Archive coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: coverage/

  publish-coverage-pages:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: coverage/
    
    - name: Create coverage summary
      run: |
        mkdir -p coverage
        echo "Coverage Report Generated - Build ${{ github.run_number }}" > coverage/summary.txt
        echo "Commit: ${{ github.sha }}" >> coverage/summary.txt
        echo "Branch: ${{ github.ref_name }}" >> coverage/summary.txt
        echo "Date: $(date)" >> coverage/summary.txt
    
    - name: Upload coverage to Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: coverage/

  publish-release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build project
      run: dotnet build --configuration Release --no-restore
    
    - name: Pack NuGet Package
      run: |
        dotnet pack --configuration Release --no-build --output ./artifacts
    
    - name: Create Release Package
      run: |
        mkdir -p release
        cp -r . release/source-code
        cp artifacts/*.nupkg release/
        cp OrderProcessingApp.csproj release/
        cd release && tar -czf ../OrderProcessing-v${{ github.event.release.tag_name }}.tar.gz .
    
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          OrderProcessing-v${{ github.event.release.tag_name }}.tar.gz
          artifacts/*.nupkg
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-coverage:
    needs: publish-coverage-pages
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Deploy coverage report to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4