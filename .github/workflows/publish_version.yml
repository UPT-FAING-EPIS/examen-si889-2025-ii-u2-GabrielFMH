name: Create Version Release

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to release (e.g., v1.0.1)'
        required: true
        type: string

env:
  DOTNET_VERSION: '6.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  test-and-analyze:
    name: Test and Analyze Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          # Para ejecuciones manuales, usa el input. Si no, genera una versión dev.
          VERSION="${{ inputs.version_tag || '0.0.0-dev' }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    # --- INICIO DE LA CORRECCIÓN ---
    - name: Run tests with coverage and generate report
      run: |
        dotnet test \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --logger "trx;LogFileName=test-results.trx" # <-- LÍNEA AÑADIDA

    # (Opcional pero recomendado) Paso para verificar que los archivos se crearon
    - name: List files in coverage directory
      run: ls -R ./coverage

    - name: Generate test report
      uses: dorny/test-reporter@v1
      # Ejecutar siempre para que reporte fallos si los hay
      if: success() || failure()
      with:
        name: Release Tests Results
        # El patrón '**/*.trx' buscará el archivo en cualquier subdirectorio
        path: '**/*.trx'
        reporter: dotnet-trx
        fail-on-error: true
    # --- FIN DE LA CORRECCIÓN ---

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        # La ruta al archivo de cobertura sigue siendo la misma
        file: ./coverage/**/coverage.cobertura.xml
        flags: release
        name: codecov-release
        fail_ci_if_error: false

    # ... el resto de los steps de este job no necesitan cambios ...
    - name: Generate coverage report
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.1.19
        mkdir -p coverage-reports
        reportgenerator \
        -reports:./coverage/**/coverage.cobertura.xml \
        -targetdir:coverage-reports \
        -reporttypes:"Html;HtmlSummary;Xml;XmlSummary"

    - name: Create coverage summary
      run: |
        echo "# Coverage Report - Build ${{ github.run_number }}" > coverage-reports/index.md
        echo "**Commit:** ${{ github.sha }}" >> coverage-reports/index.md
        echo "**Date:** $(date)" >> coverage-reports/index.md
        echo "**Version:** ${{ steps.version.outputs.VERSION }}" >> coverage-reports/index.md
        echo "" >> coverage-reports/index.md
        echo "See detailed reports:" >> coverage-reports/index.md
        echo "- [HTML Report](HtmlReport.html)" >> coverage-reports/index.md
        echo "- [Summary Report](SummaryHtmlReport.html)" >> coverage-reports/index.md
        echo "- [XML Report](coverage.xml)" >> coverage-reports/index.md

    - name: Archive coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: coverage-reports/
        retention-days: 90